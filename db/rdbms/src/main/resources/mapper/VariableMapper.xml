<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.VariableMapper">

  <select id="count" resultType="java.lang.Long">
    SELECT COUNT(*)
    FROM VARIABLE
    <include refid="io.camunda.db.rdbms.sql.VariableMapper.searchFilter"/>
  </select>

  <!-- default search statement for databases supporting LIMIT/OFFSET-->
  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.VariableDbQuery"
    resultMap="io.camunda.db.rdbms.sql.VariableMapper.searchResultMap">
    SELECT * FROM (
    SELECT
      VAR_KEY,
      LEGACY_ID,
      LEGACY_PI_ID,
      PROCESS_INSTANCE_KEY,
      PROCESS_DEFINITION_ID,
      SCOPE_KEY,
      TYPE,
      VAR_NAME,
      DOUBLE_VALUE,
      LONG_VALUE,
      VAR_VALUE,
      VAR_FULL_VALUE,
      TENANT_ID,
      IS_PREVIEW
    FROM VARIABLE
    <include refid="io.camunda.db.rdbms.sql.VariableMapper.searchFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchFilter">
    WHERE 1 = 1
    <if test="legacyId != null and !legacyId.isEmpty()">
      AND LEGACY_ID = #{legacyId}
    </if>
    <if test="legacyProcessInstanceId != null and !legacyProcessInstanceId.isEmpty()">
      AND LEGACY_ID = #{legacyProcessInstanceId}
    </if>
    <!-- basic filters -->
    <if
      test="filter.processInstanceKeyOperations != null and !filter.processInstanceKeyOperations.isEmpty()">
      <foreach collection="filter.processInstanceKeyOperations" item="operation">
        AND PROCESS_INSTANCE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.scopeKeyOperations != null and !filter.scopeKeyOperations.isEmpty()">
      <foreach collection="filter.scopeKeyOperations" item="operation">
        AND SCOPE_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.variableKeyOperations != null and !filter.variableKeyOperations.isEmpty()">
      <foreach collection="filter.variableKeyOperations" item="operation">
        AND VAR_KEY
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.tenantIds != null and !filter.tenantIds.isEmpty()">
      AND TENANT_ID IN
      <foreach collection="filter.tenantIds" item="value" open="(" separator=", " close=")">#{value}</foreach>
    </if>
    <if test="filter.nameOperations != null and !filter.nameOperations.isEmpty()">
      <foreach collection="filter.nameOperations" item="operation">
        AND VAR_NAME
        <include refid="io.camunda.db.rdbms.sql.Commons.operationCondition"/>
      </foreach>
    </if>
    <if test="filter.isTruncated != null">
      AND IS_PREVIEW = #{filter.isTruncated}
    </if>
    <!-- advanced filters on variable name / values -->
    <if test="filter.valueOperations != null and !filter.valueOperations.isEmpty()">
      <foreach collection="filter.valueOperations" item="operation">
        AND
        <include refid="io.camunda.db.rdbms.sql.Commons.variableOperationCondition"/>
      </foreach>
    </if>

  </sql>

  <sql id="variableSortMapper">
    <choose>
      <when test='item.field == "value"'>
        VAR_VALUE
      </when>
      <when test='item.field == "name"'>
        VAR_NAME
      </when>
      <when test='item.field == "tenantId"'>
        TENANT_ID
      </when>
      <when test='item.field == "key"'>
        VAR_KEY
      </when>
      <when test='item.field == "scopeKey"'>
        SCOPE_KEY
      </when>
      <when test='item.field == "processInstanceKey"'>
        PROCESS_INSTANCE_KEY
      </when>
    </choose>
  </sql>

  <resultMap id="searchResultMap" type="io.camunda.db.rdbms.write.domain.VariableDbModel">
    <id property="variableKey" column="VAR_KEY" javaType="java.lang.Long"/>
    <result property="name" column="VAR_NAME" javaType="java.lang.String"/>
    <result property="value" column="VAR_VALUE" javaType="java.lang.String"/>
    <result property="fullValue" column="VAR_FULL_VALUE" javaType="java.lang.String"/>
    <result property="isPreview" column="IS_PREVIEW" javaType="java.lang.Boolean"/>
    <result property="scopeKey" column="SCOPE_KEY" javaType="java.lang.Long"/>
    <result property="processInstanceKey" column="PROCESS_INSTANCE_KEY" javaType="java.lang.Long"/>
    <result property="processDefinitionId" column="PROCESS_DEFINITION_ID" javaType="java.lang.String"/>
    <result property="tenantId" column="TENANT_ID" javaType="java.lang.String"/>
    <result property="legacyId" column="LEGACY_ID" javaType="java.lang.String"/>
    <result property="legacyProcessInstanceId" column="LEGACY_PI_ID" javaType="java.lang.String"/>
  </resultMap>

  <insert
    id="insert"
    statementType="PREPARED"
    parameterType="io.camunda.db.rdbms.write.domain.VariableDbModel"
    flushCache="true">
    INSERT INTO VARIABLE (VAR_KEY, LEGACY_ID, LEGACY_PI_ID, PROCESS_INSTANCE_KEY, PROCESS_DEFINITION_ID, SCOPE_KEY, TYPE, VAR_NAME, DOUBLE_VALUE,
                          LONG_VALUE,
                          VAR_VALUE, VAR_FULL_VALUE, TENANT_ID, IS_PREVIEW)
    VALUES (#{variableKey}, #{legacyId}, #{legacyProcessInstanceId}, #{processInstanceKey}, #{processDefinitionId}, #{scopeKey}, #{type}, #{name}, #{doubleValue},
            #{longValue},
            #{value}, #{fullValue}, #{tenantId}, #{isPreview})
  </insert>

  <update
    id="update"
    statementType="PREPARED"
    parameterType="io.camunda.db.rdbms.write.domain.VariableDbModel"
    flushCache="true">
      UPDATE VARIABLE
      SET TYPE         = #{type},
          DOUBLE_VALUE = #{doubleValue},
          LONG_VALUE   = #{longValue},
          VAR_VALUE  = #{value},
          VAR_FULL_VALUE = #{fullValue},
          IS_PREVIEW     = #{isPreview}
      WHERE VAR_KEY = #{variableKey}
  </update>
</mapper>
