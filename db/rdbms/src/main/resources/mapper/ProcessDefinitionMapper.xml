<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.db.rdbms.sql.ProcessDefinitionMapper">

  <select id="count" parameterType="io.camunda.db.rdbms.read.domain.ProcessDefinitionDbQuery">
    SELECT COUNT(*)
    FROM PROCESS_DEFINITION pi
    <include refid="io.camunda.db.rdbms.sql.ProcessDefinitionMapper.searchFilter"/>
  </select>

  <select id="search" parameterType="io.camunda.db.rdbms.read.domain.ProcessDefinitionDbQuery"
    resultMap="io.camunda.db.rdbms.sql.ProcessDefinitionMapper.searchResultMap">
    SELECT * FROM (
    SELECT PROCESS_DEFINITION_KEY,
    PROCESS_DEFINITION_ID,
    RESOURCE_NAME,
    NAME,
    TENANT_ID,
    VERSION_TAG,
    VERSION,
    BPMN_XML,
    FORM_ID,
    LEGACY_ID
    FROM PROCESS_DEFINITION
    <include refid="io.camunda.db.rdbms.sql.ProcessDefinitionMapper.searchFilter"/>
    ) t
    <include refid="io.camunda.db.rdbms.sql.Commons.keySetPageFilter"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.orderBy"/>
    <include refid="io.camunda.db.rdbms.sql.Commons.paging"/>
  </select>

  <sql id="searchFilter">
    WHERE 1 = 1
    <if test="legacyId != null and !legacyId.isEmpty()">
      AND LEGACY_ID = #{legacyId}
    </if>
    <!-- basic filters -->
    <if test="filter.processDefinitionKeys != null and !filter.processDefinitionKeys.isEmpty()">
      AND PROCESS_DEFINITION_KEY IN
      <foreach collection="filter.processDefinitionKeys" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.processDefinitionIds != null and !filter.processDefinitionIds.isEmpty()">
      AND PROCESS_DEFINITION_ID IN
      <foreach collection="filter.processDefinitionIds" item="value" open="(" separator=", "
        close=")">#{value}
      </foreach>
    </if>
    <if test="filter.names != null and !filter.names.isEmpty()">
      AND name IN
      <foreach collection="filter.names" item="value" open="(" separator=", " close=")">#{value}
      </foreach>
    </if>
    <if test="filter.resourceNames != null and !filter.resourceNames.isEmpty()">
      AND RESOURCE_NAME IN
      <foreach collection="filter.resourceNames" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
    <if test="filter.versions != null and !filter.versions.isEmpty()">
      AND VERSION IN
      <foreach collection="filter.versions" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
    <if test="filter.versionTags != null and !filter.versionTags.isEmpty()">
      AND VERSION_TAG IN
      <foreach collection="filter.versionTags" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
    <if test="filter.tenantIds != null and !filter.tenantIds.isEmpty()">
      AND TENANT_ID IN
      <foreach collection="filter.tenantIds" item="value" open="(" separator=", " close=")">
        #{value}
      </foreach>
    </if>
  </sql>

  <resultMap id="searchResultMap" type="io.camunda.db.rdbms.write.domain.ProcessDefinitionDbModel">
      <id property="processDefinitionKey" column="PROCESS_DEFINITION_KEY" javaType="java.lang.Long"/>
      <result property="processDefinitionId" column="PROCESS_DEFINITION_ID" javaType="java.lang.String"/>
      <result property="resourceName" column="RESOURCE_NAME" javaType="java.lang.String"/>
      <result property="name" column="NAME" javaType="java.lang.String"/>
      <result property="tenantId" column="TENANT_ID" javaType="java.lang.String"/>
      <result property="versionTag" column="VERSION_TAG" javaType="java.lang.String"/>
      <result property="version" column="VERSION" javaType="java.lang.Integer"/>
      <result property="bpmnXml" column="BPMN_XML" javaType="java.lang.String"/>
      <result property="formId" column="FORM_ID" javaType="java.lang.String"/>
      <result property="legacyId" column="LEGACY_ID" javaType="java.lang.String"/>
  </resultMap>

  <insert
    id="insert"
    parameterType="io.camunda.db.rdbms.write.domain.ProcessDefinitionDbModel"
    flushCache="true">
    INSERT INTO PROCESS_DEFINITION (PROCESS_DEFINITION_KEY, PROCESS_DEFINITION_ID, RESOURCE_NAME,
                                    BPMN_XML, NAME, TENANT_ID, VERSION_TAG, VERSION, FORM_ID, LEGACY_ID)
    VALUES (#{processDefinitionKey}, #{processDefinitionId}, #{resourceName}, #{bpmnXml}, #{name},
            #{tenantId}, #{versionTag}, #{version}, #{formId}, #{legacyId})
  </insert>
</mapper>
